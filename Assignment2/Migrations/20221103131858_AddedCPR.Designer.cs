// <auto-generated />
using System;
using Assignment2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Assignment2.Migrations
{
    [DbContext(typeof(CoolDBContext))]
    [Migration("20221103131858_AddedCPR")]
    partial class AddedCPR
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment2.Views.Booking", b =>
                {
                    b.Property<int>("bookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookingID"), 1L, 1);

                    b.Property<string>("authentication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("facilityID")
                        .HasColumnType("int");

                    b.Property<string>("hourInterval")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("participants")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("bookingID");

                    b.HasIndex("facilityID");

                    b.HasIndex("userID");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            bookingID = 1,
                            authentication = "AA8B420OP69",
                            category = "school",
                            facilityID = 1,
                            hourInterval = "10:00-15:00",
                            note = "We might be done early",
                            participants = 5,
                            userID = 1
                        },
                        new
                        {
                            bookingID = 2,
                            authentication = "HHSV7728JJD",
                            category = "school",
                            facilityID = 1,
                            hourInterval = "12:00-13:00",
                            participants = 3,
                            userID = 1
                        },
                        new
                        {
                            bookingID = 3,
                            authentication = "UUA0339JDBN",
                            category = "private",
                            facilityID = 2,
                            hourInterval = "09:00-11:30",
                            participants = 2,
                            userID = 2
                        },
                        new
                        {
                            bookingID = 4,
                            authentication = "UBDJA8AB659",
                            category = "private",
                            facilityID = 2,
                            hourInterval = "14:30-16:00",
                            participants = 3,
                            userID = 3
                        });
                });

            modelBuilder.Entity("Assignment2.Views.CPR", b =>
                {
                    b.Property<int>("CPRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CPRID"), 1L, 1);

                    b.Property<string>("CPRs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bookingID")
                        .HasColumnType("int");

                    b.HasKey("CPRID");

                    b.HasIndex("bookingID");

                    b.ToTable("CPR");

                    b.HasData(
                        new
                        {
                            CPRID = 1,
                            CPRs = "010101-1111",
                            bookingID = 1
                        },
                        new
                        {
                            CPRID = 2,
                            CPRs = "020202-2",
                            bookingID = 1
                        },
                        new
                        {
                            CPRID = 3,
                            CPRs = "030303-3333",
                            bookingID = 1
                        },
                        new
                        {
                            CPRID = 4,
                            CPRs = "040404-4",
                            bookingID = 1
                        },
                        new
                        {
                            CPRID = 5,
                            CPRs = "050505-5555",
                            bookingID = 1
                        },
                        new
                        {
                            CPRID = 6,
                            CPRs = "060606-6",
                            bookingID = 2
                        },
                        new
                        {
                            CPRID = 7,
                            CPRs = "070707-7777",
                            bookingID = 2
                        },
                        new
                        {
                            CPRID = 8,
                            CPRs = "080808-8888",
                            bookingID = 2
                        },
                        new
                        {
                            CPRID = 9,
                            CPRs = "090909-9999",
                            bookingID = 3
                        },
                        new
                        {
                            CPRID = 10,
                            CPRs = "101010-1010",
                            bookingID = 3
                        },
                        new
                        {
                            CPRID = 11,
                            CPRs = "111110-1110",
                            bookingID = 4
                        },
                        new
                        {
                            CPRID = 12,
                            CPRs = "121212-1212",
                            bookingID = 4
                        },
                        new
                        {
                            CPRID = 13,
                            CPRs = "131313-1313",
                            bookingID = 4
                        });
                });

            modelBuilder.Entity("Assignment2.Views.Facility", b =>
                {
                    b.Property<int>("facilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("facilityID"), 1L, 1);

                    b.Property<Point>("coordinates")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("facilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("maxOccupants")
                        .HasColumnType("int");

                    b.Property<bool>("reservable")
                        .HasColumnType("bit");

                    b.Property<string>("utilities")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("facilityID");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            facilityID = 1,
                            coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-122.333 47.6097)"),
                            description = "A shelter located in Risskov forest",
                            facilityName = "Risskov shelter",
                            kind = "Shelter",
                            maxOccupants = 5,
                            reservable = true,
                            utilities = "Sink"
                        },
                        new
                        {
                            facilityID = 2,
                            coordinates = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-10.2454 88.2342)"),
                            facilityName = "Aarhus central forest fireplace",
                            kind = "Firplace",
                            maxOccupants = 3,
                            reservable = true
                        });
                });

            modelBuilder.Entity("Assignment2.Views.Item", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("itemId"), 1L, 1);

                    b.Property<int>("facilityID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("itemId");

                    b.HasIndex("facilityID");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            itemId = 1,
                            facilityID = 1,
                            name = "Shovel"
                        },
                        new
                        {
                            itemId = 2,
                            facilityID = 1,
                            name = "Pan"
                        },
                        new
                        {
                            itemId = 3,
                            facilityID = 2,
                            name = "Shovel"
                        });
                });

            modelBuilder.Entity("Assignment2.Views.Maintainance", b =>
                {
                    b.Property<int>("maintainanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("maintainanceID"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemID")
                        .HasColumnType("int");

                    b.HasKey("maintainanceID");

                    b.HasIndex("itemID");

                    b.ToTable("Maintainances");

                    b.HasData(
                        new
                        {
                            maintainanceID = 1,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Is getting a bit rusty, might need replacing soon",
                            itemID = 1
                        },
                        new
                        {
                            maintainanceID = 2,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            itemID = 1
                        },
                        new
                        {
                            maintainanceID = 3,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "A bit bent but still fine",
                            itemID = 2
                        },
                        new
                        {
                            maintainanceID = 4,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            itemID = 3
                        },
                        new
                        {
                            maintainanceID = 5,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "The handle had fallen off but is reattached",
                            itemID = 3
                        });
                });

            modelBuilder.Entity("Assignment2.Views.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"), 1L, 1);

                    b.Property<int?>("CVR")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.HasKey("userID");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            userID = 1,
                            CVR = 12345678,
                            category = "school",
                            email = "sdbck@mail.com",
                            name = "Lasse",
                            phoneNumber = 12345678
                        },
                        new
                        {
                            userID = 2,
                            category = "private",
                            email = "dasd@mail.com",
                            name = "Aske",
                            phoneNumber = 12345678
                        },
                        new
                        {
                            userID = 3,
                            category = "private",
                            email = "adsd@mail.com",
                            name = "Marcus",
                            phoneNumber = 12345678
                        });
                });

            modelBuilder.Entity("Assignment2.Views.Booking", b =>
                {
                    b.HasOne("Assignment2.Views.Facility", "facility")
                        .WithMany("bookings")
                        .HasForeignKey("facilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.Views.User", "user")
                        .WithMany("bookings")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Assignment2.Views.CPR", b =>
                {
                    b.HasOne("Assignment2.Views.Booking", "booking")
                        .WithMany("CPR")
                        .HasForeignKey("bookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("booking");
                });

            modelBuilder.Entity("Assignment2.Views.Item", b =>
                {
                    b.HasOne("Assignment2.Views.Facility", "facility")
                        .WithMany("items")
                        .HasForeignKey("facilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");
                });

            modelBuilder.Entity("Assignment2.Views.Maintainance", b =>
                {
                    b.HasOne("Assignment2.Views.Item", "item")
                        .WithMany("maintainances")
                        .HasForeignKey("itemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("Assignment2.Views.Booking", b =>
                {
                    b.Navigation("CPR");
                });

            modelBuilder.Entity("Assignment2.Views.Facility", b =>
                {
                    b.Navigation("bookings");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Assignment2.Views.Item", b =>
                {
                    b.Navigation("maintainances");
                });

            modelBuilder.Entity("Assignment2.Views.User", b =>
                {
                    b.Navigation("bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
